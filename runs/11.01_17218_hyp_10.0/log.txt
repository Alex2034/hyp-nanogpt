====================================================================================================
import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
# import multiprocessing

import random
import datetime
import time
from torch.utils.tensorboard import SummaryWriter
import json

import glob
from dataclasses import dataclass
from transformers import GPT2TokenizerFast, PreTrainedTokenizerFast

import numpy as np
import math
import torch
from torch import nn
import torch.nn.functional as F
import torch.distributed as dist
import torch._inductor.config as config
from torch.nn.parallel import DistributedDataParallel as DDP

from lib.lorentz.manifold import CustomLorentz
from lib.geoopt.optim import RiemannianSGD
# from lib.geoopt.optim import RiemannianAdam

import argparse

torch.set_float32_matmul_precision('high')
os.environ["TOKENIZERS_PARALLELISM"] = "false"

# -----------------------------------------------------------------------------
# Muon optimizer

def zeropower_via_svd(G, steps=None):
    U, S, V = G.svd()
    return U @ V.T

@torch.compile
def zeropower_via_newtonschulz5(G, steps=10, eps=1e-7):
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' \sim Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert len(G.shape) == 2
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    X /= (X.norm() + eps) # ensure top singular value <= 1
    if G.size(0) > G.size(1):
        X = X.T
    for _ in range(steps):
        A = X @ X.T
        B = A @ X
        X = a * X + b * B + c * A @ B
    if G.size(0) > G.size(1):
        X = X.T
    return X

zeropower_backends = dict(svd=zeropower_via_svd, newtonschulz5=zeropower_via_newtonschulz5)

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven't tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        backend: The chosen backend for the orthogonalization step. (recommended: 'newtonschulz5')
        backend_steps: The number of iteration steps to use in the backend, if it is iterative.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True,
                 backend='newtonschulz5', backend_steps=5):
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, backend=backend, backend_steps=backend_steps)
        super().__init__(params, defaults)

    def step(self):

        for group in self.param_groups:

            lr = group['lr']
            momentum = group['momentum']
            zeropower_backend = zeropower_backends[group['backend']]

            # generate weight updates in distributed fashion
            total_params = sum(p.numel() for p in group['params'])
            updates_flat = torch.zeros(total_params, device='cuda', dtype=torch.bfloat16)
            curr_idx = 0
            for i, p in enumerate(group['params']):
                # luckily this will perfectly distribute a transformer with multiple of 4 layers to 8 GPUs
                if i % int(os.environ['WORLD_SIZE']) == int(os.environ['RANK']):
                    g = p.grad
                    assert g is not None
                    state = self.state[p]
                    if 'momentum_buffer' not in state:
                        state['momentum_buffer'] = torch.zeros_like(g)
                    buf = state['momentum_buffer']
                    buf.mul_(momentum).add_(g)
                    if group['nesterov']:
                        g = g.add(buf, alpha=momentum)
                    g = zeropower_backend(g, steps=group['backend_steps'])
                    g *= max(1, g.size(0)/g.size(1))**0.5
                    updates_flat[curr_idx:curr_idx+p.numel()] = g.flatten()
                curr_idx += p.numel()

            # sync updates across devices. we are not memory-constrained so can do this simple deserialization
            dist.all_reduce(updates_flat, op=dist.ReduceOp.SUM)

            # deserialize and apply updates
            curr_idx = 0
            for p in group['params']:
                g = updates_flat[curr_idx:curr_idx+p.numel()].view_as(p.data).type_as(p.data)
                p.data.add_(g, alpha=-lr)
                curr_idx += p.numel()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the GPT-2 model

class Rotary(torch.nn.Module):

    def __init__(self, dim, base=10000):
        super().__init__()
        self.inv_freq = 1.0 / (base ** (torch.arange(0, dim, 2).float() / dim))
        self.seq_len_cached = None
        self.cos_cached = None
        self.sin_cached = None

    def forward(self, x):
        seq_len = x.shape[1]
        if seq_len != self.seq_len_cached:
            self.seq_len_cached = seq_len
            t = torch.arange(seq_len, device=x.device).type_as(self.inv_freq)
            freqs = torch.outer(t, self.inv_freq).to(x.device)
            self.cos_cached = freqs.cos().bfloat16()
            self.sin_cached = freqs.sin().bfloat16()
        return self.cos_cached[None, :, None, :], self.sin_cached[None, :, None, :]

def apply_rotary_emb(x, cos, sin):
    assert x.ndim == 4 # multihead attention
    d = x.shape[3]//2
    x1 = x[..., :d]
    x2 = x[..., d:]
    y1 = x1 * cos + x2 * sin
    y2 = x1 * (-sin) + x2 * cos
    return torch.cat([y1, y2], 3).type_as(x)

class CausalSelfAttention(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.n_head = config.n_head
        self.n_embd = config.n_embd
        self.head_dim = self.n_embd // self.n_head
        assert self.n_embd % self.n_head == 0
        self.c_q = nn.Linear(self.n_embd, self.n_embd, bias=False)
        self.c_k = nn.Linear(self.n_embd, self.n_embd, bias=False)
        self.c_v = nn.Linear(self.n_embd, self.n_embd, bias=False)
        # output projection
        self.c_proj = nn.Linear(self.n_embd, self.n_embd, bias=False)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977
        self.rotary = Rotary(self.head_dim)

    def forward(self, x):
        B, T, C = x.size() # batch size, sequence length, embedding dimensionality (n_embd)
        q = self.c_q(x).view(B, T, self.n_head, self.head_dim)
        k = self.c_k(x).view(B, T, self.n_head, self.head_dim)
        v = self.c_v(x).view(B, T, self.n_head, self.head_dim)
        cos, sin = self.rotary(q)
        q, k = F.rms_norm(q, (q.size(-1),)), F.rms_norm(k, (k.size(-1),)) # QK norm suggested by @Grad62304977
        q, k = apply_rotary_emb(q, cos, sin), apply_rotary_emb(k, cos, sin)
        y = F.scaled_dot_product_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), is_causal=True)
        y = y.transpose(1, 2).contiguous().view_as(x) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.c_fc    = nn.Linear(config.n_embd, 4 * config.n_embd, bias=False)
        self.c_proj  = nn.Linear(4 * config.n_embd, config.n_embd, bias=False)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977

    def forward(self, x):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.attn = CausalSelfAttention(config)
        self.mlp = MLP(config)

    def forward(self, x):
        x = x + self.attn(F.rms_norm(x, (x.size(-1),)))
        x = x + self.mlp(F.rms_norm(x, (x.size(-1),)))
        return x

class LorentzMLR(nn.Module):
    """ Multinomial logistic regression (MLR) in the Lorentz model
    """
    def __init__(
            self, 
            manifold: CustomLorentz, 
            num_features: int, 
            num_classes: int
        ):
        super(LorentzMLR, self).__init__()

        self.manifold = manifold

        self.a = torch.nn.Parameter(torch.zeros(num_classes,))
        self.z = torch.nn.Parameter(F.pad(torch.zeros(num_classes, num_features-2), pad=(1,0), value=1)) # z should not be (0,0)

        self.init_weights()

    def forward(self, x):
        # x: (B, T, num_features)

        # Hyperplane parameters
        sqrt_mK = 1 / self.manifold.k.sqrt()  # scalar
        norm_z = torch.norm(self.z, dim=-1)  # (num_classes,)
        w_t = torch.sinh(sqrt_mK * self.a) * norm_z  # (num_classes,)
        w_s = torch.cosh(sqrt_mK * self.a).unsqueeze(-1) * self.z  # (num_classes, num_features -1)

        beta = torch.sqrt(-w_t**2 + torch.norm(w_s, dim=-1)**2)  # (num_classes,)

        x0 = x.narrow(-1, 0, 1)  # (B, T, 1)
        x_rest = x.narrow(-1, 1, x.shape[-1]-1)  # (B, T, num_features -1)
        inner_prod = torch.matmul(x_rest, self.z.T)  # (B, T, num_classes)
        alpha = -x0 * w_t.view(1, 1, -1) + torch.cosh(sqrt_mK * self.a).view(1, 1, -1) * inner_prod  # (B, T, num_classes)
        sqrt_mK_alpha_over_beta = sqrt_mK * alpha / beta.view(1, 1, -1)
        d = self.manifold.k.sqrt() * torch.abs(torch.asinh(sqrt_mK_alpha_over_beta))  # (B, T, num_classes)

        logits = torch.sign(alpha) * beta.view(1, 1, -1) * d  # (B, T, num_classes)

        return logits

    def init_weights(self):
        stdv = 1. / math.sqrt(1 + self.z.size(1))
        nn.init.uniform_(self.z, -stdv, stdv)
        nn.init.uniform_(self.a, -stdv, stdv)

# -----------------------------------------------------------------------------
# The main GPT-2 model

@dataclass
class GPTConfig:
    vocab_size : int = 50304
    n_layer : int = 12
    n_head : int = 6 # head dim 128 suggested by @Grad62304977
    n_embd : int = 784
    lm_head : str = 'euc'
    curvature : float = 1.0

class GPT(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.config = config

        self.transformer = nn.ModuleDict(dict(
            wte = nn.Embedding(config.vocab_size, config.n_embd),
            h = nn.ModuleList([Block(config) for _ in range(config.n_layer)]),
        ))

        if config.lm_head == 'euc':
            self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False)
            stdv = 1. / math.sqrt(config.n_embd)
            nn.init.uniform_(self.lm_head.weight.data, -stdv, stdv)

        elif config.lm_head == 'hyp':
            self.manifold = CustomLorentz(k=torch.tensor([config.curvature]))
            self.lm_head = LorentzMLR(
                manifold=self.manifold,
                num_features=config.n_embd,
                num_classes=config.vocab_size
            )
        else:
            raise ValueError("Invalid lm_head, choose 'euc'/'hyp'.")

    def forward(self, idx, targets=None, return_logits=True):

        # forward the GPT model itself
        x = self.transformer.wte(idx) # token embeddings of shape (b, t, n_embd)
        x = F.rms_norm(x, (x.size(-1),))
        for block in self.transformer.h:
            x = block(x)
        x = F.rms_norm(x, (x.size(-1),))

        if targets is not None:
            # if we are given some desired targets also calculate the loss
            logits = self.lm_head(x)
            logits = logits.float() # use tf32/fp32 for logits
            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1), ignore_index=-1)
        else:
            # inference-time mini-optimization: only forward the lm_head on the very last position
            logits = self.lm_head(x[:, [-1], :]) # note: using list [-1] to preserve the time dim
            logits = logits.float() # use tf32/fp32 for logits
            loss = None

        # there are performance reasons why not returning logits is prudent, if not needed
        if not return_logits:
            logits = None

        return logits, loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _peek_data_shard(filename):
    # only reads the header, returns header data
    with open(filename, "rb") as f:
        # first read the header, which is 256 int32 integers (4 bytes each)
        header = np.frombuffer(f.read(256*4), dtype=np.int32)
    if header[0] != 20240520:
        print("ERROR: magic number mismatch in the data .bin file!")
        print("---> HINT: Are you passing in a correct file with --input_bin?")
        print("---> HINT: Dataset encoding changed recently, re-run data prepro or refer again to README")
        print("---> HINT: For example re-run: `python dev/data/tinyshakespeare.py`, then re-try")
        exit(1)
    assert header[1] == 1, "unsupported version"
    ntok = header[2] # number of tokens (claimed)
    return ntok # for now just return the number of tokens

def _load_data_shard(filename):
    with open(filename, "rb") as f:
        # first read the header, which is 256 int32 integers (4 bytes each)
        header = np.frombuffer(f.read(256*4), dtype=np.int32)
        assert header[0] == 20240520, "magic number mismatch in the data .bin file"
        assert header[1] == 1, "unsupported version"
        ntok = header[2] # number of tokens (claimed)
        # the rest of it are tokens, stored as uint16
        tokens = np.frombuffer(f.read(), dtype=np.uint16)
    assert len(tokens) == ntok, "number of tokens read does not match header?"
    return tokens

class DistributedDataLoader:
    def __init__(self, filename_pattern, B, T, process_rank, num_processes):
        self.process_rank = process_rank
        self.num_processes = num_processes
        self.B = B
        self.T = T

        # glob files that match the pattern
        self.files = sorted(glob.glob(filename_pattern))
        assert len(self.files) > 0, f"did not find any files that match the pattern {filename_pattern}"

        # load and validate all data shards, count number of tokens in total
        ntok_total = 0
        for fname in self.files:
            shard_ntok = _peek_data_shard(fname)
            assert shard_ntok >= num_processes * B * T + 1
            ntok_total += int(shard_ntok)
        self.ntok_total = ntok_total

        # kick things off
        self.reset()

    def reset(self):
        self.current_shard = 0
        self.current_position = self.process_rank * self.B * self.T
        self.tokens = _load_data_shard(self.files[self.current_shard])

    def advance(self): # advance to next data shard
        self.current_shard = (self.current_shard + 1) % len(self.files)
        self.current_position = self.process_rank * self.B * self.T
        self.tokens = _load_data_shard(self.files[self.current_shard])

    def next_batch(self):
        B = self.B
        T = self.T
        buf = self.tokens[self.current_position : self.current_position+B*T+1]
        buf = torch.tensor(buf.astype(np.int32), dtype=torch.long)
        x = (buf[:-1]).view(B, T) # inputs
        y = (buf[1:]).view(B, T) # targets
        # advance current position and load next shard if necessary
        self.current_position += B * T * self.num_processes
        if self.current_position + (B * T * self.num_processes + 1) > len(self.tokens):
            self.advance()
        return x.cuda(), y.cuda()

def generate_text(model, context, max_length=200, temperature=1.0, top_k=50):
    model.eval()
    generated = context.clone()
    for _ in range(max_length):
        with torch.no_grad():
            logits, _ = model(generated, return_logits=True)
            logits = logits[:, -1, :] / temperature
            if top_k > 0:
                values, indices = torch.topk(logits, top_k)
                logits[logits < values[:, [-1]]] = -float('Inf')
            probs = F.softmax(logits, dim=-1)
            next_token = torch.multinomial(probs, num_samples=1)
            generated = torch.cat((generated, next_token), dim=1)
    return generated

def encode_text(text):
    """Encodes a string into token IDs."""
    return tokenizer.encode(text, return_tensors="pt").to(device)

def decode_tokens(tokens):
    """Decodes token IDs into a readable string."""
    return tokenizer.decode(tokens.cpu().tolist(), skip_special_tokens=True)


# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data hyperparams
    # input_bin : str = 'data/fineweb10B/fineweb_train_*.bin' # input .bin to train on
    # input_val_bin : str = 'data/fineweb10B/fineweb_val_*.bin' # input .bin to eval validation loss on
    data_path : str = 'data/fineweb10B'
    input_bin: str = ''  
    input_val_bin: str = ''  
    num_vocab : int = 50304
    # optimization hyperparams
    batch_size : int = 64 # batch size, in sequences, across all devices
    # device_batch_size : int = 64 # batch size, in sequences, per device
    sequence_length : int = 1024 # sequence length, in tokens
    num_iterations : int = 10_000 # number of iterations to run (for FW 2.7B was 4578)
    warmup_iters : int = 0
    warmdown_iters : int = 0 # number of iterations of linear warmup/warmdown for triangular or trapezoidal schedule
    weight_decay : float = 0
    # evaluation and logging hyperparams
    generate_every : int = 5_000
    train_loss_every : int = 100 
    val_loss_every : int = 100 # every how many steps to evaluate val loss? 0 for only at the end
    val_tokens : int = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    save_every : int = 0 # every how many steps to save the checkpoint? 0 for only at the end
    # model
    vocab_size : int = 50304
    n_layer : int = 12
    n_head : int = 6 # head dim 128 suggested by @Grad62304977
    n_embd : int = 768
    lm_head : str = 'euc'
    curvature : float = 1.0
    learnable: bool = False
    seed : int = 42

    def __post_init__(self):
        # Dynamically set .bin paths based on data_path
        if 'tinystories' in self.data_path:
            self.input_bin = f"{self.data_path}/train.bin"
            self.input_val_bin = f"{self.data_path}/val.bin"
        elif 'fineweb' in self.data_path:
            self.input_bin = f"{self.data_path}/fineweb_train_*.bin"
            self.input_val_bin = f"{self.data_path}/fineweb_val_*.bin"
        else:
            raise ValueError("Specify proper data path")

        # Calculate device_batch_size based on number of devices
        n_devices = len(os.getenv("CUDA_VISIBLE_DEVICES", "").split(","))
        if n_devices == 0:  # Default to 1 if CUDA_VISIBLE_DEVICES is not set
            n_devices = 1
        self.device_batch_size = self.batch_size // n_devices

parser = argparse.ArgumentParser(description="Train GPT model with customizable parameters.")

parser.add_argument(
    "--curvature",
    type=float,
    default=1.0,
    help="Set the curvature for the Lorentz manifold (float, default: 1.0); if learnable, then is initial value."
)
parser.add_argument("--learnable", type=bool, default=False, help="Is the curvature learnable? (default: False)")
parser.add_argument("--lm_head", type=str, default='euc', help="Set the mode for LM Head (default: 'euc')")
parser.add_argument("--data_path", type=str, default='data/fineweb10B', help="Path to dataset directory (default: 'data/tinystories')")
# parser.add_argument("--batch_size", type=int, default=64, help="Total batch size across all devices (default: 64)")
parser.add_argument("--seed", type=int, default=42, help="Random seed for reproducibility (default: 42)")

args_from_cli = parser.parse_args()

if args_from_cli.lm_head == 'euc':
    args = Hyperparameters(
        lm_head=args_from_cli.lm_head,
        data_path=args_from_cli.data_path,
        # batch_size=args_from_cli.batch_size,
        seed=args_from_cli.seed
    )
elif args_from_cli.lm_head == 'hyp':
    args = Hyperparameters(
        lm_head=args_from_cli.lm_head,
        curvature=args_from_cli.curvature,
        learnable=args_from_cli.learnable,
        data_path=args_from_cli.data_path,
        # batch_size=args_from_cli.batch_size,
        seed=args_from_cli.seed
    )
else:
    raise ValueError("incorrect lm_head value.")

# Set seeds for reproducibility
SEED = args.seed  
random.seed(SEED)
np.random.seed(SEED)
torch.manual_seed(SEED)
torch.cuda.manual_seed_all(SEED)  

if "tinystories" in args.data_path:
    tokenizer = PreTrainedTokenizerFast(
        tokenizer_file=os.path.join(args.data_path, "tinystories_tokenizer.json"),
        eos_token="<|endoftext|>",
        unk_token="[UNK]",
        pad_token="[PAD]"
    )
else:
    # GPT-2 tokenizer for FineWeb
    tokenizer = GPT2TokenizerFast.from_pretrained("gpt2")
    # If you want a special eos token
    tokenizer.eos_token = "<|endoftext|>"
    tokenizer.pad_token = tokenizer.eos_token  # e.g., for convenience

# set up DDP (distributed data parallel). torchrun sets this env variable
assert torch.cuda.is_available()
dist.init_process_group(backend='nccl')
ddp_rank = int(os.environ['RANK'])
ddp_local_rank = int(os.environ['LOCAL_RANK'])
ddp_world_size = int(os.environ['WORLD_SIZE'])
device = f'cuda:{ddp_local_rank}'
torch.cuda.set_device(device)
print(f"using device: {device}")
master_process = (ddp_rank == 0) # this process will do logging, checkpointing etc.

# convenience variables
B, T = args.device_batch_size, args.sequence_length
# calculate the number of steps to take in the val loop.
assert args.val_tokens % (B * T * ddp_world_size) == 0
val_steps = args.val_tokens // (B * T * ddp_world_size)
# calculate the steps of gradient accumulation required to attain the desired global batch size.
assert args.batch_size % (B * ddp_world_size) == 0
train_accumulation_steps = args.batch_size // (B * ddp_world_size)

# load tokens
train_loader = DistributedDataLoader(args.input_bin, B, T, ddp_rank, ddp_world_size)
val_loader = DistributedDataLoader(args.input_val_bin, B, T, ddp_rank, ddp_world_size)
if master_process:
    print(f"Training DataLoader: total number of tokens: {train_loader.ntok_total} across {len(train_loader.files)} files")
    print(f"Validation DataLoader: total number of tokens: {val_loader.ntok_total} across {len(val_loader.files)} files")
x, y = train_loader.next_batch()

# there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency. suggested to me by @Grad62304977.
# this originates from Karpathy's experiments.
# num_vocab = 50304
model = GPT(GPTConfig(vocab_size=args.num_vocab, 
                      n_layer=args.n_layer, 
                      n_head=args.n_head,
                      n_embd=args.n_embd,
                      lm_head=args.lm_head,
                      curvature=args.curvature))
model = model.cuda()
if hasattr(config, "coordinate_descent_tuning"):
    config.coordinate_descent_tuning = True # suggested by @Chillee
model = torch.compile(model)
# here we wrap model into DDP container
model = DDP(model, device_ids=[ddp_local_rank])
raw_model = model.module # always contains the "raw" unwrapped model
ctx = torch.amp.autocast(device_type='cuda', dtype=torch.bfloat16)

# Fix the `k` parameter 
k_params = []
for name, param in raw_model.named_parameters():
    if "manifold.k" in name:
        param.requires_grad = args.learnable  
        if param.requires_grad:
            k_params.append(param)
        
lm_head_params = [p for name, p in raw_model.lm_head.named_parameters() if (p.requires_grad and ("manifold.k" not in name))]
# k_params = [p for name, p in raw_model.lm_head.named_parameters() if (p.requires_grad and ("manifold.k" in name))]

params = list(raw_model.transformer.h.parameters())
matrix_params = [p for p in params if p.ndim == 2]
wte_params = [raw_model.transformer.wte.weight]

optimizer_lm_head = RiemannianSGD(
    [{'params': lm_head_params}], lr=0.1, weight_decay=5e-4, momentum=0.9, nesterov=True, stabilize=1
)

optimizer_muon = Muon(matrix_params, lr=0.05, momentum=0.95)

optimizer_wte = torch.optim.Adam(wte_params, lr=0.6, betas=(0.8, 0.95), fused=True)

if k_params:
    optimizer_k = torch.optim.Adam(k_params, lr=0.1, betas=(0.8, 0.95), fused=True)
    optimizers = [optimizer_lm_head, optimizer_muon, optimizer_wte,optimizer_k]
    print(f"k is learned, {args.learnable}")
else:
    optimizers = [optimizer_lm_head, optimizer_muon, optimizer_wte]
    print(f"k is not learned, {args.learnable}")


# learning rate decay scheduler (linear warmup and warmdown)
def get_lr(it):
    assert it <= args.num_iterations
    # 1) linear warmup for warmup_iters steps
    if it < args.warmup_iters:
        return (it+1) / args.warmup_iters
    # 2) constant lr for a while
    elif args.warmdown_iters and (it >= args.num_iterations - args.warmdown_iters):
        return (args.num_iterations - it) / args.warmdown_iters
    # 3) 
    else:
        decay_ratio = (it - args.warmup_iters) / (args.num_iterations - args.warmup_iters)
        assert 0 <= decay_ratio <= 1
        return 0.1**decay_ratio

schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]

# begin logging
if master_process:

    now = datetime.datetime.now()
    date_part = now.strftime('%d.%m')  
    seconds_since_midnight = (now - now.replace(hour=0, minute=0, second=0, microsecond=0)).seconds #int(time.time() % 86400)
    run_id = f"{date_part}_{seconds_since_midnight}"

    if args.lm_head == "euc":
        suffix = "euc"
    elif args.lm_head == "hyp":
        suffix = f"hyp_{args.curvature}"
    else:
        raise ValueError(f"Invalid lm_head name format.")
    # Construct the new folder name
    run_id = f"{run_id}_{suffix}"
    
    # Create log directory and file
    logdir = f'runs/{run_id}/'
    os.makedirs(logdir, exist_ok=True)
    os.makedirs(os.path.join(logdir, "tensorboard_logs"), exist_ok=True)

    print(f"Logs for this run will be stored in: {logdir}")

    print("Writing logs to: " + os.path.join(logdir, "tensorboard_logs"))
    writer = SummaryWriter(log_dir=os.path.join(logdir, "tensorboard_logs"))

    config_path = os.path.join(logdir, "config.json")
    with open(config_path, "w") as f:
        json.dump(vars(args), f, indent=4)

    def pretty_json(hp):
        json_hp = json.dumps(hp, indent=2)
        return "".join("\t" + line for line in json_hp.splitlines(True))
    
    writer.add_text("run_params", pretty_json(vars(args)))
    logfile = os.path.join(logdir, 'log.txt')
    # create the log file
    with open(logfile, "w") as f:
        # begin the log by printing this file (the Python code)
        f.write('='*100 + '\n')
        f.write(code)
        f.write('='*100 + '\n')
        # log information about the hardware/software environment this is running on
        # and print the full `nvidia-smi` to file
        f.write(f"Running pytorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}\nnvidia-smi:\n")
        import subprocess
        result = subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        f.write(f'{result.stdout}\n')
        f.write('='*100 + '\n')

training_time_s = 0.0
# start the clock
torch.cuda.synchronize()
t0 = time.time()
total_t0 = time.time()
train_loss_accum = 0.0
train_loss_count = 0
# begin training
train_loader.reset()
for step in range(args.num_iterations + 1):
    last_step = (step == args.num_iterations)
    # This effectively ignores timing first 10 steps, which are slower for weird reasons.
    # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
    # steps with dummy data first, and then re-initialize the model and reset the loader.
    if step == 10:
        training_time_s = 0.0
        t0 = time.time()
    timed_steps = float('nan') if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

    # once in a while evaluate the validation dataset
    if (last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0)):
        # stop the clock
        torch.cuda.synchronize()
        training_time_s += time.time() - t0
        # run validation batches
        model.eval()
        val_loader.reset()
        val_loss = 0.0
        for _ in range(val_steps):
            x_val, y_val = val_loader.next_batch()
            with ctx: # of course, we'd like to use no_grad() here too, but that creates a torch.compile error for some reason
                _, loss = model(x_val, y_val, return_logits=False)
                val_loss += loss.detach()
                del loss
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        val_loss /= val_steps
        # log val loss to console and to logfile
        if master_process:
            print(f'step:{step}/{args.num_iterations} val_loss:{val_loss:.4f} train_time:{training_time_s:.2f}s step_avg:{1000*training_time_s/(timed_steps-1):.0f}ms')
            with open(logfile, "a") as f:
                f.write(f'step:{step}/{args.num_iterations} val_loss:{val_loss:.4f} train_time:{training_time_s:.2f}s step_avg:{1000*training_time_s/(timed_steps-1):.0f}ms\n')
            writer.add_scalar('Loss/Validation', val_loss.item(), step)
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.time()

    if master_process and step and (step % args.generate_every == 0):
        # Use a fixed prompt or context for generation
        prompt = "Once upon a time"  # Customize as per your dataset
        context = encode_text(prompt)
        
        # Generate text
        generated_tokens = generate_text(raw_model, context, max_length=200, temperature=1.0, top_k=50)
        generated_text = decode_tokens(generated_tokens[0])
        
        # Log the generated text to TensorBoard
        writer.add_text(f"Generated_Text/Step_{step}", generated_text, step)
        
        # Optionally log to console for immediate feedback
        print(f"[Step {step}] Generated Text: {generated_text}")


    if master_process and (last_step or (args.save_every > 0 and step % args.save_every == 0)):
        # stop the clock
        torch.cuda.synchronize()
        training_time_s += time.time() - t0
        # save the state of the training process
        log = dict(step=step, code=code, model=raw_model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
        torch.save(log, 'ckpts/%s_state_step%06d.pt' % (run_id, step))
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.time()

    # bit confusing: we want to make sure to eval on 0th iteration
    # but also after the very last iteration. so we loop for step <= num_iterations
    # instead of just < num_iterations (one extra due to <=), only to do
    # the validation/sampling one last time, and then we break right here as we're done.
    if last_step:
        break

    # --------------- TRAINING SECTION BEGIN -----------------
    model.train()
    for i in range(1, train_accumulation_steps+1):
        # forward pass
        with ctx:
            _, loss = model(x, y, return_logits=False)
            train_loss = loss.detach()
        # advance the dataset for the next batch
        x, y = train_loader.next_batch()
        # backward pass
        if i < train_accumulation_steps:
            with model.no_sync(): # there's no need to sync gradients every accumulation step
                loss.backward()
        else:
            loss.backward() # just sync on the last step
    for name, p in model.named_parameters():
        if p.grad is None:
            # print(f"WARNING: Parameter {name} has no gradient. Skipping.")
            continue
        p.grad /= train_accumulation_steps
    # step the optimizers and schedulers
    for opt, sched in zip(optimizers, schedulers):
        opt.step()
        sched.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    train_loss_accum += train_loss.item()
    train_loss_count += 1
    # --------------- TRAINING SECTION END -------------------
    # everything that follows now is just diagnostics, prints, logging, etc.

    #dist.all_reduce(train_loss, op=dist.ReduceOp.AVG) # all-reducing the training loss would be more correct in terms of logging, but slower
    if master_process and (step+1) % args.train_loss_every == 0:
        avg_train_loss = train_loss_accum / train_loss_count
        elapsed_time = time.time() - total_t0
        approx_time = training_time_s + (time.time() - t0)
        avg_time_per_step = approx_time/timed_steps
        estimated_total_time = avg_time_per_step * args.num_iterations
        print(f"step:{step+1}/{args.num_iterations} avg_train_loss:{avg_train_loss:.4f} time:{elapsed_time:.0f}/{estimated_total_time:.0f}s step_avg:{1000*avg_time_per_step:.0f}ms")
        with open(logfile, "a") as f:
            f.write(f"step:{step+1}/{args.num_iterations} avg_train_loss:{avg_train_loss:.4f} time:{elapsed_time:.0f}s step_avg:{1000*avg_time_per_step:.0f}ms\n")
        writer.add_scalar('Loss/Train', avg_train_loss, step)
        train_loss_accum = 0.0
        train_loss_count = 0

if master_process:
    total_training_time = time.time() - total_t0
    print(f"Total training time: {total_training_time:.2f}s")
    with open(logfile, "a") as f:
        f.write(f"Total training time: {total_training_time:.2f}s\n")
    print(f"peak memory consumption: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB")

# -------------------------------------------------------------------------
# clean up nice
if master_process:
    writer.close()
dist.destroy_process_group()
====================================================================================================
Running pytorch 2.4.1+cu121 compiled for CUDA 12.1
nvidia-smi:
Sat Jan 11 04:46:58 2025       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.154.05             Driver Version: 535.154.05   CUDA Version: 12.3     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:19:00.0 Off |                    0 |
| N/A   51C    P0             579W / 700W |  43817MiB / 81559MiB |    100%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:2D:00.0 Off |                    0 |
| N/A   38C    P0             117W / 700W |   3379MiB / 81559MiB |      2%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:3F:00.0 Off |                    0 |
| N/A   31C    P0             119W / 700W |   3379MiB / 81559MiB |      2%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:66:00.0 Off |                    0 |
| N/A   27C    P0              72W / 700W |      0MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:9B:00.0 Off |                    0 |
| N/A   27C    P0              72W / 700W |      0MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:AE:00.0 Off |                    0 |
| N/A   53C    P0             570W / 700W |  46607MiB / 81559MiB |    100%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:BF:00.0 Off |                    0 |
| N/A   55C    P0             518W / 700W |  44639MiB / 81559MiB |     99%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:E4:00.0 Off |                    0 |
| N/A   51C    P0             501W / 700W |  46607MiB / 81559MiB |     99%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
|    0   N/A  N/A    361532      C   ...da3/envs/esevriugov_work/bin/python    43808MiB |
|    1   N/A  N/A    406618      C   ...niconda3/envs/fokin_HCNN/bin/python     3370MiB |
|    2   N/A  N/A    406619      C   ...niconda3/envs/fokin_HCNN/bin/python     3370MiB |
|    5   N/A  N/A    361533      C   ...da3/envs/esevriugov_work/bin/python    46598MiB |
|    6   N/A  N/A    363196      C   ...da3/envs/esevriugov_work/bin/python    44630MiB |
|    7   N/A  N/A    363197      C   ...da3/envs/esevriugov_work/bin/python    46598MiB |
+---------------------------------------------------------------------------------------+

====================================================================================================
step:0/10000 val_loss:10.9780 train_time:0.22s step_avg:nanms
step:100/10000 avg_train_loss:7.4421 time:81s step_avg:128ms
step:100/10000 val_loss:6.7819 train_time:11.51s step_avg:128ms
step:200/10000 avg_train_loss:6.5783 time:99s step_avg:128ms
step:200/10000 val_loss:6.4063 train_time:24.30s step_avg:128ms
step:300/10000 avg_train_loss:6.2866 time:117s step_avg:128ms
step:300/10000 val_loss:6.2011 train_time:37.10s step_avg:128ms
step:400/10000 avg_train_loss:6.1013 time:135s step_avg:128ms
step:400/10000 val_loss:6.0496 train_time:49.91s step_avg:128ms
step:500/10000 avg_train_loss:5.9726 time:153s step_avg:128ms
step:500/10000 val_loss:5.9373 train_time:62.72s step_avg:128ms
step:600/10000 avg_train_loss:5.9047 time:172s step_avg:128ms
step:600/10000 val_loss:5.8586 train_time:75.53s step_avg:128ms
step:700/10000 avg_train_loss:5.8203 time:190s step_avg:128ms
step:700/10000 val_loss:5.7937 train_time:88.31s step_avg:128ms
step:800/10000 avg_train_loss:5.7556 time:208s step_avg:128ms
step:800/10000 val_loss:5.7403 train_time:101.11s step_avg:128ms
step:900/10000 avg_train_loss:5.7215 time:226s step_avg:128ms
step:900/10000 val_loss:5.6970 train_time:113.91s step_avg:128ms
step:1000/10000 avg_train_loss:5.6823 time:244s step_avg:128ms
step:1000/10000 val_loss:5.6589 train_time:126.71s step_avg:128ms
step:1100/10000 avg_train_loss:5.6438 time:262s step_avg:128ms
step:1100/10000 val_loss:5.6267 train_time:139.50s step_avg:128ms
step:1200/10000 avg_train_loss:5.6244 time:280s step_avg:128ms
step:1200/10000 val_loss:5.5990 train_time:152.29s step_avg:128ms
step:1300/10000 avg_train_loss:5.5920 time:298s step_avg:128ms
step:1300/10000 val_loss:5.5715 train_time:165.09s step_avg:128ms
step:1400/10000 avg_train_loss:5.5482 time:316s step_avg:128ms
step:1400/10000 val_loss:5.5496 train_time:177.88s step_avg:128ms
step:1500/10000 avg_train_loss:5.5204 time:334s step_avg:128ms
step:1500/10000 val_loss:5.5304 train_time:190.67s step_avg:128ms
step:1600/10000 avg_train_loss:5.5007 time:352s step_avg:128ms
step:1600/10000 val_loss:5.5091 train_time:203.67s step_avg:128ms
step:1700/10000 avg_train_loss:5.5172 time:370s step_avg:128ms
step:1700/10000 val_loss:5.4949 train_time:216.44s step_avg:128ms
step:1800/10000 avg_train_loss:5.4754 time:388s step_avg:128ms
step:1800/10000 val_loss:5.4787 train_time:229.24s step_avg:128ms
step:1900/10000 avg_train_loss:5.4811 time:406s step_avg:128ms
step:1900/10000 val_loss:5.4650 train_time:242.03s step_avg:128ms
step:2000/10000 avg_train_loss:5.4760 time:425s step_avg:128ms
step:2000/10000 val_loss:5.4510 train_time:254.82s step_avg:128ms
step:2100/10000 avg_train_loss:5.4325 time:443s step_avg:128ms
step:2100/10000 val_loss:5.4419 train_time:267.62s step_avg:128ms
step:2200/10000 avg_train_loss:5.4384 time:461s step_avg:128ms
step:2200/10000 val_loss:5.4287 train_time:280.41s step_avg:128ms
step:2300/10000 avg_train_loss:5.4371 time:479s step_avg:128ms
step:2300/10000 val_loss:5.4197 train_time:293.20s step_avg:128ms
step:2400/10000 avg_train_loss:5.4296 time:497s step_avg:128ms
step:2400/10000 val_loss:5.4082 train_time:306.00s step_avg:128ms
step:2500/10000 avg_train_loss:5.4324 time:515s step_avg:128ms
step:2500/10000 val_loss:5.3996 train_time:318.79s step_avg:128ms
step:2600/10000 avg_train_loss:5.4145 time:533s step_avg:128ms
step:2600/10000 val_loss:5.3896 train_time:331.59s step_avg:128ms
step:2700/10000 avg_train_loss:5.4257 time:551s step_avg:128ms
step:2700/10000 val_loss:5.3844 train_time:344.39s step_avg:128ms
step:2800/10000 avg_train_loss:5.3567 time:569s step_avg:128ms
step:2800/10000 val_loss:5.3757 train_time:357.20s step_avg:128ms
step:2900/10000 avg_train_loss:5.3676 time:587s step_avg:128ms
step:2900/10000 val_loss:5.3693 train_time:370.00s step_avg:128ms
step:3000/10000 avg_train_loss:5.3705 time:605s step_avg:128ms
step:3000/10000 val_loss:5.3602 train_time:382.76s step_avg:128ms
step:3100/10000 avg_train_loss:5.3639 time:623s step_avg:128ms
step:3100/10000 val_loss:5.3537 train_time:395.75s step_avg:128ms
step:3200/10000 avg_train_loss:5.3260 time:642s step_avg:128ms
step:3200/10000 val_loss:5.3474 train_time:408.54s step_avg:128ms
step:3300/10000 avg_train_loss:5.3682 time:660s step_avg:128ms
step:3300/10000 val_loss:5.3412 train_time:421.34s step_avg:128ms
step:3400/10000 avg_train_loss:5.3209 time:678s step_avg:128ms
step:3400/10000 val_loss:5.3350 train_time:434.13s step_avg:128ms
step:3500/10000 avg_train_loss:5.3340 time:696s step_avg:128ms
step:3500/10000 val_loss:5.3294 train_time:446.92s step_avg:128ms
step:3600/10000 avg_train_loss:5.3356 time:714s step_avg:128ms
step:3600/10000 val_loss:5.3243 train_time:459.72s step_avg:128ms
step:3700/10000 avg_train_loss:5.3320 time:732s step_avg:128ms
step:3700/10000 val_loss:5.3197 train_time:472.52s step_avg:128ms
step:3800/10000 avg_train_loss:5.3113 time:750s step_avg:128ms
step:3800/10000 val_loss:5.3149 train_time:485.32s step_avg:128ms
step:3900/10000 avg_train_loss:5.3039 time:768s step_avg:128ms
step:3900/10000 val_loss:5.3101 train_time:498.12s step_avg:128ms
step:4000/10000 avg_train_loss:5.3070 time:786s step_avg:128ms
step:4000/10000 val_loss:5.3058 train_time:510.90s step_avg:128ms
step:4100/10000 avg_train_loss:5.3027 time:804s step_avg:128ms
step:4100/10000 val_loss:5.3015 train_time:523.70s step_avg:128ms
step:4200/10000 avg_train_loss:5.2961 time:822s step_avg:128ms
step:4200/10000 val_loss:5.2974 train_time:536.50s step_avg:128ms
step:4300/10000 avg_train_loss:5.2918 time:840s step_avg:128ms
step:4300/10000 val_loss:5.2939 train_time:549.29s step_avg:128ms
step:4400/10000 avg_train_loss:5.3079 time:858s step_avg:128ms
step:4400/10000 val_loss:5.2900 train_time:562.08s step_avg:128ms
step:4500/10000 avg_train_loss:5.3145 time:876s step_avg:128ms
step:4500/10000 val_loss:5.2845 train_time:574.87s step_avg:128ms
step:4600/10000 avg_train_loss:5.2878 time:895s step_avg:128ms
step:4600/10000 val_loss:5.2828 train_time:587.86s step_avg:128ms
step:4700/10000 avg_train_loss:5.2799 time:913s step_avg:128ms
step:4700/10000 val_loss:5.2778 train_time:600.62s step_avg:128ms
step:4800/10000 avg_train_loss:5.2869 time:931s step_avg:128ms
step:4800/10000 val_loss:5.2748 train_time:613.40s step_avg:128ms
step:4900/10000 avg_train_loss:5.2666 time:949s step_avg:128ms
step:4900/10000 val_loss:5.2712 train_time:626.19s step_avg:128ms
step:5000/10000 avg_train_loss:5.2893 time:967s step_avg:128ms
step:5000/10000 val_loss:5.2681 train_time:638.98s step_avg:128ms
step:5100/10000 avg_train_loss:5.2655 time:1160s step_avg:162ms
step:5100/10000 val_loss:5.2648 train_time:826.91s step_avg:162ms
step:5200/10000 avg_train_loss:5.2733 time:1198s step_avg:163ms
step:5200/10000 val_loss:5.2625 train_time:847.17s step_avg:163ms
step:5300/10000 avg_train_loss:5.2629 time:1228s step_avg:164ms
step:5300/10000 val_loss:5.2589 train_time:867.44s step_avg:164ms
step:5400/10000 avg_train_loss:5.2489 time:1258s step_avg:165ms
step:5400/10000 val_loss:5.2559 train_time:887.71s step_avg:165ms
step:5500/10000 avg_train_loss:5.2837 time:1288s step_avg:165ms
step:5500/10000 val_loss:5.2537 train_time:907.98s step_avg:165ms
step:5600/10000 avg_train_loss:5.2408 time:1318s step_avg:166ms
step:5600/10000 val_loss:5.2501 train_time:928.25s step_avg:166ms
step:5700/10000 avg_train_loss:5.2359 time:1347s step_avg:167ms
step:5700/10000 val_loss:5.2490 train_time:948.52s step_avg:167ms
step:5800/10000 avg_train_loss:5.2375 time:1377s step_avg:167ms
step:5800/10000 val_loss:5.2454 train_time:968.79s step_avg:167ms
step:5900/10000 avg_train_loss:5.2460 time:1407s step_avg:168ms
step:5900/10000 val_loss:5.2427 train_time:989.06s step_avg:168ms
step:6000/10000 avg_train_loss:5.2411 time:1437s step_avg:169ms
step:6000/10000 val_loss:5.2405 train_time:1009.33s step_avg:169ms
step:6100/10000 avg_train_loss:5.2461 time:1467s step_avg:169ms
step:6100/10000 val_loss:5.2385 train_time:1029.76s step_avg:169ms
step:6200/10000 avg_train_loss:5.2664 time:1497s step_avg:170ms
step:6200/10000 val_loss:5.2361 train_time:1050.03s step_avg:170ms
step:6300/10000 avg_train_loss:5.2537 time:1527s step_avg:170ms
step:6300/10000 val_loss:5.2332 train_time:1070.30s step_avg:170ms
step:6400/10000 avg_train_loss:5.2474 time:1557s step_avg:171ms
step:6400/10000 val_loss:5.2318 train_time:1090.57s step_avg:171ms
step:6500/10000 avg_train_loss:5.2667 time:1587s step_avg:171ms
step:6500/10000 val_loss:5.2293 train_time:1110.84s step_avg:171ms
step:6600/10000 avg_train_loss:5.2317 time:1617s step_avg:172ms
step:6600/10000 val_loss:5.2267 train_time:1131.11s step_avg:172ms
step:6700/10000 avg_train_loss:5.2215 time:1647s step_avg:172ms
step:6700/10000 val_loss:5.2256 train_time:1151.38s step_avg:172ms
step:6800/10000 avg_train_loss:5.2369 time:1677s step_avg:173ms
step:6800/10000 val_loss:5.2228 train_time:1171.64s step_avg:173ms
step:6900/10000 avg_train_loss:5.2246 time:1707s step_avg:173ms
step:6900/10000 val_loss:5.2213 train_time:1191.92s step_avg:173ms
step:7000/10000 avg_train_loss:5.2376 time:1737s step_avg:173ms
step:7000/10000 val_loss:5.2190 train_time:1212.19s step_avg:173ms
step:7100/10000 avg_train_loss:5.2253 time:1767s step_avg:174ms
step:7100/10000 val_loss:5.2170 train_time:1232.46s step_avg:174ms
step:7200/10000 avg_train_loss:5.1980 time:1796s step_avg:174ms
step:7200/10000 val_loss:5.2153 train_time:1252.73s step_avg:174ms
step:7300/10000 avg_train_loss:5.2332 time:1826s step_avg:175ms
step:7300/10000 val_loss:5.2137 train_time:1273.00s step_avg:175ms
step:7400/10000 avg_train_loss:5.2195 time:1856s step_avg:175ms
step:7400/10000 val_loss:5.2121 train_time:1293.28s step_avg:175ms
step:7500/10000 avg_train_loss:5.2356 time:1886s step_avg:175ms
step:7500/10000 val_loss:5.2098 train_time:1313.55s step_avg:175ms
step:7600/10000 avg_train_loss:5.2156 time:1916s step_avg:176ms
step:7600/10000 val_loss:5.2088 train_time:1333.82s step_avg:176ms
step:7700/10000 avg_train_loss:5.2388 time:1946s step_avg:176ms
step:7700/10000 val_loss:5.2073 train_time:1354.27s step_avg:176ms
step:7800/10000 avg_train_loss:5.2044 time:1976s step_avg:176ms
step:7800/10000 val_loss:5.2050 train_time:1374.54s step_avg:176ms
step:7900/10000 avg_train_loss:5.2269 time:2006s step_avg:177ms
step:7900/10000 val_loss:5.2032 train_time:1394.81s step_avg:177ms
step:8000/10000 avg_train_loss:5.1949 time:2036s step_avg:177ms
step:8000/10000 val_loss:5.2022 train_time:1415.09s step_avg:177ms
step:8100/10000 avg_train_loss:5.2282 time:2066s step_avg:177ms
step:8100/10000 val_loss:5.2008 train_time:1435.36s step_avg:177ms
step:8200/10000 avg_train_loss:5.1852 time:2096s step_avg:178ms
step:8200/10000 val_loss:5.1993 train_time:1455.63s step_avg:178ms
step:8300/10000 avg_train_loss:5.1959 time:2126s step_avg:178ms
step:8300/10000 val_loss:5.1973 train_time:1475.91s step_avg:178ms
step:8400/10000 avg_train_loss:5.2192 time:2156s step_avg:178ms
step:8400/10000 val_loss:5.1966 train_time:1496.18s step_avg:178ms
step:8500/10000 avg_train_loss:5.1852 time:2186s step_avg:179ms
step:8500/10000 val_loss:5.1950 train_time:1516.45s step_avg:179ms
step:8600/10000 avg_train_loss:5.1879 time:2216s step_avg:179ms
step:8600/10000 val_loss:5.1938 train_time:1536.72s step_avg:179ms
step:8700/10000 avg_train_loss:5.2161 time:2246s step_avg:179ms
step:8700/10000 val_loss:5.1926 train_time:1556.99s step_avg:179ms
step:8800/10000 avg_train_loss:5.1820 time:2275s step_avg:179ms
step:8800/10000 val_loss:5.1911 train_time:1577.25s step_avg:179ms
step:8900/10000 avg_train_loss:5.2246 time:2305s step_avg:180ms
step:8900/10000 val_loss:5.1899 train_time:1597.50s step_avg:180ms
step:9000/10000 avg_train_loss:5.1796 time:2335s step_avg:180ms
step:9000/10000 val_loss:5.1891 train_time:1617.77s step_avg:180ms
step:9100/10000 avg_train_loss:5.1959 time:2365s step_avg:180ms
step:9100/10000 val_loss:5.1872 train_time:1638.04s step_avg:180ms
step:9200/10000 avg_train_loss:5.2164 time:2395s step_avg:180ms
step:9200/10000 val_loss:5.1863 train_time:1658.47s step_avg:180ms
step:9300/10000 avg_train_loss:5.2110 time:2425s step_avg:181ms
step:9300/10000 val_loss:5.1853 train_time:1678.74s step_avg:181ms
step:9400/10000 avg_train_loss:5.1752 time:2455s step_avg:181ms
step:9400/10000 val_loss:5.1839 train_time:1699.01s step_avg:181ms
step:9500/10000 avg_train_loss:5.1933 time:2485s step_avg:181ms
step:9500/10000 val_loss:5.1831 train_time:1719.28s step_avg:181ms
step:9600/10000 avg_train_loss:5.1800 time:2515s step_avg:181ms
step:9600/10000 val_loss:5.1819 train_time:1739.55s step_avg:181ms
step:9700/10000 avg_train_loss:5.1788 time:2545s step_avg:182ms
step:9700/10000 val_loss:5.1809 train_time:1759.82s step_avg:182ms
step:9800/10000 avg_train_loss:5.2250 time:2575s step_avg:182ms
step:9800/10000 val_loss:5.1797 train_time:1780.09s step_avg:182ms
step:9900/10000 avg_train_loss:5.1854 time:2605s step_avg:182ms
step:9900/10000 val_loss:5.1787 train_time:1800.36s step_avg:182ms
step:10000/10000 avg_train_loss:5.1697 time:2635s step_avg:182ms
step:10000/10000 val_loss:5.1778 train_time:1820.63s step_avg:182ms
Total training time: 2647.81s
