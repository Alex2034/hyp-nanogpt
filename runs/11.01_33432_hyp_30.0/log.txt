====================================================================================================
import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
# import multiprocessing

import random
import datetime
import time
from torch.utils.tensorboard import SummaryWriter
import json

import glob
from dataclasses import dataclass
from transformers import GPT2TokenizerFast, PreTrainedTokenizerFast

import numpy as np
import math
import torch
from torch import nn
import torch.nn.functional as F
import torch.distributed as dist
import torch._inductor.config as config
from torch.nn.parallel import DistributedDataParallel as DDP

from lib.lorentz.manifold import CustomLorentz
from lib.geoopt.optim import RiemannianSGD
# from lib.geoopt.optim import RiemannianAdam

import argparse

torch.set_float32_matmul_precision('high')
os.environ["TOKENIZERS_PARALLELISM"] = "false"

# -----------------------------------------------------------------------------
# Muon optimizer

def zeropower_via_svd(G, steps=None):
    U, S, V = G.svd()
    return U @ V.T

@torch.compile
def zeropower_via_newtonschulz5(G, steps=10, eps=1e-7):
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' \sim Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert len(G.shape) == 2
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    X /= (X.norm() + eps) # ensure top singular value <= 1
    if G.size(0) > G.size(1):
        X = X.T
    for _ in range(steps):
        A = X @ X.T
        B = A @ X
        X = a * X + b * B + c * A @ B
    if G.size(0) > G.size(1):
        X = X.T
    return X

zeropower_backends = dict(svd=zeropower_via_svd, newtonschulz5=zeropower_via_newtonschulz5)

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven't tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        backend: The chosen backend for the orthogonalization step. (recommended: 'newtonschulz5')
        backend_steps: The number of iteration steps to use in the backend, if it is iterative.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True,
                 backend='newtonschulz5', backend_steps=5):
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, backend=backend, backend_steps=backend_steps)
        super().__init__(params, defaults)

    def step(self):

        for group in self.param_groups:

            lr = group['lr']
            momentum = group['momentum']
            zeropower_backend = zeropower_backends[group['backend']]

            # generate weight updates in distributed fashion
            total_params = sum(p.numel() for p in group['params'])
            updates_flat = torch.zeros(total_params, device='cuda', dtype=torch.bfloat16)
            curr_idx = 0
            for i, p in enumerate(group['params']):
                # luckily this will perfectly distribute a transformer with multiple of 4 layers to 8 GPUs
                if i % int(os.environ['WORLD_SIZE']) == int(os.environ['RANK']):
                    g = p.grad
                    assert g is not None
                    state = self.state[p]
                    if 'momentum_buffer' not in state:
                        state['momentum_buffer'] = torch.zeros_like(g)
                    buf = state['momentum_buffer']
                    buf.mul_(momentum).add_(g)
                    if group['nesterov']:
                        g = g.add(buf, alpha=momentum)
                    g = zeropower_backend(g, steps=group['backend_steps'])
                    g *= max(1, g.size(0)/g.size(1))**0.5
                    updates_flat[curr_idx:curr_idx+p.numel()] = g.flatten()
                curr_idx += p.numel()

            # sync updates across devices. we are not memory-constrained so can do this simple deserialization
            dist.all_reduce(updates_flat, op=dist.ReduceOp.SUM)

            # deserialize and apply updates
            curr_idx = 0
            for p in group['params']:
                g = updates_flat[curr_idx:curr_idx+p.numel()].view_as(p.data).type_as(p.data)
                p.data.add_(g, alpha=-lr)
                curr_idx += p.numel()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the GPT-2 model

class Rotary(torch.nn.Module):

    def __init__(self, dim, base=10000):
        super().__init__()
        self.inv_freq = 1.0 / (base ** (torch.arange(0, dim, 2).float() / dim))
        self.seq_len_cached = None
        self.cos_cached = None
        self.sin_cached = None

    def forward(self, x):
        seq_len = x.shape[1]
        if seq_len != self.seq_len_cached:
            self.seq_len_cached = seq_len
            t = torch.arange(seq_len, device=x.device).type_as(self.inv_freq)
            freqs = torch.outer(t, self.inv_freq).to(x.device)
            self.cos_cached = freqs.cos().bfloat16()
            self.sin_cached = freqs.sin().bfloat16()
        return self.cos_cached[None, :, None, :], self.sin_cached[None, :, None, :]

def apply_rotary_emb(x, cos, sin):
    assert x.ndim == 4 # multihead attention
    d = x.shape[3]//2
    x1 = x[..., :d]
    x2 = x[..., d:]
    y1 = x1 * cos + x2 * sin
    y2 = x1 * (-sin) + x2 * cos
    return torch.cat([y1, y2], 3).type_as(x)

class CausalSelfAttention(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.n_head = config.n_head
        self.n_embd = config.n_embd
        self.head_dim = self.n_embd // self.n_head
        assert self.n_embd % self.n_head == 0
        self.c_q = nn.Linear(self.n_embd, self.n_embd, bias=False)
        self.c_k = nn.Linear(self.n_embd, self.n_embd, bias=False)
        self.c_v = nn.Linear(self.n_embd, self.n_embd, bias=False)
        # output projection
        self.c_proj = nn.Linear(self.n_embd, self.n_embd, bias=False)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977
        self.rotary = Rotary(self.head_dim)

    def forward(self, x):
        B, T, C = x.size() # batch size, sequence length, embedding dimensionality (n_embd)
        q = self.c_q(x).view(B, T, self.n_head, self.head_dim)
        k = self.c_k(x).view(B, T, self.n_head, self.head_dim)
        v = self.c_v(x).view(B, T, self.n_head, self.head_dim)
        cos, sin = self.rotary(q)
        q, k = F.rms_norm(q, (q.size(-1),)), F.rms_norm(k, (k.size(-1),)) # QK norm suggested by @Grad62304977
        q, k = apply_rotary_emb(q, cos, sin), apply_rotary_emb(k, cos, sin)
        y = F.scaled_dot_product_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), is_causal=True)
        y = y.transpose(1, 2).contiguous().view_as(x) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.c_fc    = nn.Linear(config.n_embd, 4 * config.n_embd, bias=False)
        self.c_proj  = nn.Linear(4 * config.n_embd, config.n_embd, bias=False)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977

    def forward(self, x):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.attn = CausalSelfAttention(config)
        self.mlp = MLP(config)

    def forward(self, x):
        x = x + self.attn(F.rms_norm(x, (x.size(-1),)))
        x = x + self.mlp(F.rms_norm(x, (x.size(-1),)))
        return x

class LorentzMLR(nn.Module):
    """ Multinomial logistic regression (MLR) in the Lorentz model
    """
    def __init__(
            self, 
            manifold: CustomLorentz, 
            num_features: int, 
            num_classes: int
        ):
        super(LorentzMLR, self).__init__()

        self.manifold = manifold

        self.a = torch.nn.Parameter(torch.zeros(num_classes,))
        self.z = torch.nn.Parameter(F.pad(torch.zeros(num_classes, num_features-2), pad=(1,0), value=1)) # z should not be (0,0)

        self.init_weights()

    def forward(self, x):
        # x: (B, T, num_features)

        # Hyperplane parameters
        sqrt_mK = 1 / self.manifold.k.sqrt()  # scalar
        norm_z = torch.norm(self.z, dim=-1)  # (num_classes,)
        w_t = torch.sinh(sqrt_mK * self.a) * norm_z  # (num_classes,)
        w_s = torch.cosh(sqrt_mK * self.a).unsqueeze(-1) * self.z  # (num_classes, num_features -1)

        beta = torch.sqrt(-w_t**2 + torch.norm(w_s, dim=-1)**2)  # (num_classes,)

        x0 = x.narrow(-1, 0, 1)  # (B, T, 1)
        x_rest = x.narrow(-1, 1, x.shape[-1]-1)  # (B, T, num_features -1)
        inner_prod = torch.matmul(x_rest, self.z.T)  # (B, T, num_classes)
        alpha = -x0 * w_t.view(1, 1, -1) + torch.cosh(sqrt_mK * self.a).view(1, 1, -1) * inner_prod  # (B, T, num_classes)
        sqrt_mK_alpha_over_beta = sqrt_mK * alpha / beta.view(1, 1, -1)
        d = self.manifold.k.sqrt() * torch.abs(torch.asinh(sqrt_mK_alpha_over_beta))  # (B, T, num_classes)

        logits = torch.sign(alpha) * beta.view(1, 1, -1) * d  # (B, T, num_classes)

        return logits

    def init_weights(self):
        stdv = 1. / math.sqrt(1 + self.z.size(1))
        nn.init.uniform_(self.z, -stdv, stdv)
        nn.init.uniform_(self.a, -stdv, stdv)

# -----------------------------------------------------------------------------
# The main GPT-2 model

@dataclass
class GPTConfig:
    vocab_size : int = 50304
    n_layer : int = 12
    n_head : int = 6 # head dim 128 suggested by @Grad62304977
    n_embd : int = 784
    lm_head : str = 'euc'
    curvature : float = 1.0

class GPT(nn.Module):

    def __init__(self, config):
        super().__init__()
        self.config = config

        self.transformer = nn.ModuleDict(dict(
            wte = nn.Embedding(config.vocab_size, config.n_embd),
            h = nn.ModuleList([Block(config) for _ in range(config.n_layer)]),
        ))

        if config.lm_head == 'euc':
            self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False)
            stdv = 1. / math.sqrt(config.n_embd)
            nn.init.uniform_(self.lm_head.weight.data, -stdv, stdv)

        elif config.lm_head == 'hyp':
            self.manifold = CustomLorentz(k=torch.tensor([config.curvature]))
            self.lm_head = LorentzMLR(
                manifold=self.manifold,
                num_features=config.n_embd,
                num_classes=config.vocab_size
            )
        else:
            raise ValueError("Invalid lm_head, choose 'euc'/'hyp'.")

    def forward(self, idx, targets=None, return_logits=True):

        # forward the GPT model itself
        x = self.transformer.wte(idx) # token embeddings of shape (b, t, n_embd)
        x = F.rms_norm(x, (x.size(-1),))
        for block in self.transformer.h:
            x = block(x)
        x = F.rms_norm(x, (x.size(-1),))

        if targets is not None:
            # if we are given some desired targets also calculate the loss
            logits = self.lm_head(x)
            logits = logits.float() # use tf32/fp32 for logits
            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1), ignore_index=-1)
        else:
            # inference-time mini-optimization: only forward the lm_head on the very last position
            logits = self.lm_head(x[:, [-1], :]) # note: using list [-1] to preserve the time dim
            logits = logits.float() # use tf32/fp32 for logits
            loss = None

        # there are performance reasons why not returning logits is prudent, if not needed
        if not return_logits:
            logits = None

        return logits, loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _peek_data_shard(filename):
    # only reads the header, returns header data
    with open(filename, "rb") as f:
        # first read the header, which is 256 int32 integers (4 bytes each)
        header = np.frombuffer(f.read(256*4), dtype=np.int32)
    if header[0] != 20240520:
        print("ERROR: magic number mismatch in the data .bin file!")
        print("---> HINT: Are you passing in a correct file with --input_bin?")
        print("---> HINT: Dataset encoding changed recently, re-run data prepro or refer again to README")
        print("---> HINT: For example re-run: `python dev/data/tinyshakespeare.py`, then re-try")
        exit(1)
    assert header[1] == 1, "unsupported version"
    ntok = header[2] # number of tokens (claimed)
    return ntok # for now just return the number of tokens

def _load_data_shard(filename):
    with open(filename, "rb") as f:
        # first read the header, which is 256 int32 integers (4 bytes each)
        header = np.frombuffer(f.read(256*4), dtype=np.int32)
        assert header[0] == 20240520, "magic number mismatch in the data .bin file"
        assert header[1] == 1, "unsupported version"
        ntok = header[2] # number of tokens (claimed)
        # the rest of it are tokens, stored as uint16
        tokens = np.frombuffer(f.read(), dtype=np.uint16)
    assert len(tokens) == ntok, "number of tokens read does not match header?"
    return tokens

class DistributedDataLoader:
    def __init__(self, filename_pattern, B, T, process_rank, num_processes):
        self.process_rank = process_rank
        self.num_processes = num_processes
        self.B = B
        self.T = T

        # glob files that match the pattern
        self.files = sorted(glob.glob(filename_pattern))
        assert len(self.files) > 0, f"did not find any files that match the pattern {filename_pattern}"

        # load and validate all data shards, count number of tokens in total
        ntok_total = 0
        for fname in self.files:
            shard_ntok = _peek_data_shard(fname)
            assert shard_ntok >= num_processes * B * T + 1
            ntok_total += int(shard_ntok)
        self.ntok_total = ntok_total

        # kick things off
        self.reset()

    def reset(self):
        self.current_shard = 0
        self.current_position = self.process_rank * self.B * self.T
        self.tokens = _load_data_shard(self.files[self.current_shard])

    def advance(self): # advance to next data shard
        self.current_shard = (self.current_shard + 1) % len(self.files)
        self.current_position = self.process_rank * self.B * self.T
        self.tokens = _load_data_shard(self.files[self.current_shard])

    def next_batch(self):
        B = self.B
        T = self.T
        buf = self.tokens[self.current_position : self.current_position+B*T+1]
        buf = torch.tensor(buf.astype(np.int32), dtype=torch.long)
        x = (buf[:-1]).view(B, T) # inputs
        y = (buf[1:]).view(B, T) # targets
        # advance current position and load next shard if necessary
        self.current_position += B * T * self.num_processes
        if self.current_position + (B * T * self.num_processes + 1) > len(self.tokens):
            self.advance()
        return x.cuda(), y.cuda()

def generate_text(model, context, max_length=200, temperature=1.0, top_k=50):
    model.eval()
    generated = context.clone()
    for _ in range(max_length):
        with torch.no_grad():
            logits, _ = model(generated, return_logits=True)
            logits = logits[:, -1, :] / temperature
            if top_k > 0:
                values, indices = torch.topk(logits, top_k)
                logits[logits < values[:, [-1]]] = -float('Inf')
            probs = F.softmax(logits, dim=-1)
            next_token = torch.multinomial(probs, num_samples=1)
            generated = torch.cat((generated, next_token), dim=1)
    return generated

def encode_text(text):
    """Encodes a string into token IDs."""
    return tokenizer.encode(text, return_tensors="pt").to(device)

def decode_tokens(tokens):
    """Decodes token IDs into a readable string."""
    return tokenizer.decode(tokens.cpu().tolist(), skip_special_tokens=True)


# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data hyperparams
    # input_bin : str = 'data/fineweb10B/fineweb_train_*.bin' # input .bin to train on
    # input_val_bin : str = 'data/fineweb10B/fineweb_val_*.bin' # input .bin to eval validation loss on
    data_path : str = 'data/fineweb10B'
    input_bin: str = ''  
    input_val_bin: str = ''  
    num_vocab : int = 50304
    # optimization hyperparams
    batch_size : int = 64 # batch size, in sequences, across all devices
    # device_batch_size : int = 64 # batch size, in sequences, per device
    sequence_length : int = 1024 # sequence length, in tokens
    num_iterations : int = 10_000 # number of iterations to run (for FW 2.7B was 4578)
    warmup_iters : int = 0
    warmdown_iters : int = 0 # number of iterations of linear warmup/warmdown for triangular or trapezoidal schedule
    weight_decay : float = 0
    # evaluation and logging hyperparams
    generate_every : int = 5_000
    train_loss_every : int = 100 
    val_loss_every : int = 100 # every how many steps to evaluate val loss? 0 for only at the end
    val_tokens : int = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    save_every : int = 0 # every how many steps to save the checkpoint? 0 for only at the end
    # model
    vocab_size : int = 50304
    n_layer : int = 12
    n_head : int = 6 # head dim 128 suggested by @Grad62304977
    n_embd : int = 768
    lm_head : str = 'euc'
    curvature : float = 1.0
    learnable: bool = False
    seed : int = 42

    def __post_init__(self):
        # Dynamically set .bin paths based on data_path
        if 'tinystories' in self.data_path:
            self.input_bin = f"{self.data_path}/train.bin"
            self.input_val_bin = f"{self.data_path}/val.bin"
        elif 'fineweb' in self.data_path:
            self.input_bin = f"{self.data_path}/fineweb_train_*.bin"
            self.input_val_bin = f"{self.data_path}/fineweb_val_*.bin"
        else:
            raise ValueError("Specify proper data path")

        # Calculate device_batch_size based on number of devices
        n_devices = len(os.getenv("CUDA_VISIBLE_DEVICES", "").split(","))
        if n_devices == 0:  # Default to 1 if CUDA_VISIBLE_DEVICES is not set
            n_devices = 1
        self.device_batch_size = self.batch_size // n_devices

parser = argparse.ArgumentParser(description="Train GPT model with customizable parameters.")

parser.add_argument(
    "--curvature",
    type=float,
    default=1.0,
    help="Set the curvature for the Lorentz manifold (float, default: 1.0); if learnable, then is initial value."
)
parser.add_argument("--learnable", type=bool, default=False, help="Is the curvature learnable? (default: False)")
parser.add_argument("--lm_head", type=str, default='euc', help="Set the mode for LM Head (default: 'euc')")
parser.add_argument("--data_path", type=str, default='data/fineweb10B', help="Path to dataset directory (default: 'data/tinystories')")
# parser.add_argument("--batch_size", type=int, default=64, help="Total batch size across all devices (default: 64)")
parser.add_argument("--seed", type=int, default=42, help="Random seed for reproducibility (default: 42)")

args_from_cli = parser.parse_args()

if args_from_cli.lm_head == 'euc':
    args = Hyperparameters(
        lm_head=args_from_cli.lm_head,
        data_path=args_from_cli.data_path,
        # batch_size=args_from_cli.batch_size,
        seed=args_from_cli.seed
    )
elif args_from_cli.lm_head == 'hyp':
    args = Hyperparameters(
        lm_head=args_from_cli.lm_head,
        curvature=args_from_cli.curvature,
        learnable=args_from_cli.learnable,
        data_path=args_from_cli.data_path,
        # batch_size=args_from_cli.batch_size,
        seed=args_from_cli.seed
    )
else:
    raise ValueError("incorrect lm_head value.")

# Set seeds for reproducibility
SEED = args.seed  
random.seed(SEED)
np.random.seed(SEED)
torch.manual_seed(SEED)
torch.cuda.manual_seed_all(SEED)  

if "tinystories" in args.data_path:
    tokenizer = PreTrainedTokenizerFast(
        tokenizer_file=os.path.join(args.data_path, "tinystories_tokenizer.json"),
        eos_token="<|endoftext|>",
        unk_token="[UNK]",
        pad_token="[PAD]"
    )
else:
    # GPT-2 tokenizer for FineWeb
    tokenizer = GPT2TokenizerFast.from_pretrained("gpt2")
    # If you want a special eos token
    tokenizer.eos_token = "<|endoftext|>"
    tokenizer.pad_token = tokenizer.eos_token  # e.g., for convenience

# set up DDP (distributed data parallel). torchrun sets this env variable
assert torch.cuda.is_available()
dist.init_process_group(backend='nccl')
ddp_rank = int(os.environ['RANK'])
ddp_local_rank = int(os.environ['LOCAL_RANK'])
ddp_world_size = int(os.environ['WORLD_SIZE'])
device = f'cuda:{ddp_local_rank}'
torch.cuda.set_device(device)
print(f"using device: {device}")
master_process = (ddp_rank == 0) # this process will do logging, checkpointing etc.

# convenience variables
B, T = args.device_batch_size, args.sequence_length
# calculate the number of steps to take in the val loop.
assert args.val_tokens % (B * T * ddp_world_size) == 0
val_steps = args.val_tokens // (B * T * ddp_world_size)
# calculate the steps of gradient accumulation required to attain the desired global batch size.
assert args.batch_size % (B * ddp_world_size) == 0
train_accumulation_steps = args.batch_size // (B * ddp_world_size)

# load tokens
train_loader = DistributedDataLoader(args.input_bin, B, T, ddp_rank, ddp_world_size)
val_loader = DistributedDataLoader(args.input_val_bin, B, T, ddp_rank, ddp_world_size)
if master_process:
    print(f"Training DataLoader: total number of tokens: {train_loader.ntok_total} across {len(train_loader.files)} files")
    print(f"Validation DataLoader: total number of tokens: {val_loader.ntok_total} across {len(val_loader.files)} files")
x, y = train_loader.next_batch()

# there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency. suggested to me by @Grad62304977.
# this originates from Karpathy's experiments.
# num_vocab = 50304
model = GPT(GPTConfig(vocab_size=args.num_vocab, 
                      n_layer=args.n_layer, 
                      n_head=args.n_head,
                      n_embd=args.n_embd,
                      lm_head=args.lm_head,
                      curvature=args.curvature))
model = model.cuda()
if hasattr(config, "coordinate_descent_tuning"):
    config.coordinate_descent_tuning = True # suggested by @Chillee
model = torch.compile(model)
# here we wrap model into DDP container
model = DDP(model, device_ids=[ddp_local_rank])
raw_model = model.module # always contains the "raw" unwrapped model
ctx = torch.amp.autocast(device_type='cuda', dtype=torch.bfloat16)

# Fix the `k` parameter 
k_params = []
for name, param in raw_model.named_parameters():
    if "manifold.k" in name:
        param.requires_grad = args.learnable  
        if param.requires_grad:
            k_params.append(param)
        
lm_head_params = [p for name, p in raw_model.lm_head.named_parameters() if (p.requires_grad and ("manifold.k" not in name))]
# k_params = [p for name, p in raw_model.lm_head.named_parameters() if (p.requires_grad and ("manifold.k" in name))]

params = list(raw_model.transformer.h.parameters())
matrix_params = [p for p in params if p.ndim == 2]
wte_params = [raw_model.transformer.wte.weight]

optimizer_lm_head = RiemannianSGD(
    [{'params': lm_head_params}], lr=0.1, weight_decay=5e-4, momentum=0.9, nesterov=True, stabilize=1
)

optimizer_muon = Muon(matrix_params, lr=0.05, momentum=0.95)

optimizer_wte = torch.optim.Adam(wte_params, lr=0.6, betas=(0.8, 0.95), fused=True)

if k_params:
    optimizer_k = torch.optim.Adam(k_params, lr=0.1, betas=(0.8, 0.95), fused=True)
    optimizers = [optimizer_lm_head, optimizer_muon, optimizer_wte,optimizer_k]
    print(f"k is learned, {args.learnable}")
else:
    optimizers = [optimizer_lm_head, optimizer_muon, optimizer_wte]
    print(f"k is not learned, {args.learnable}")


# learning rate decay scheduler (linear warmup and warmdown)
def get_lr(it):
    assert it <= args.num_iterations
    # 1) linear warmup for warmup_iters steps
    if it < args.warmup_iters:
        return (it+1) / args.warmup_iters
    # 2) constant lr for a while
    elif args.warmdown_iters and (it >= args.num_iterations - args.warmdown_iters):
        return (args.num_iterations - it) / args.warmdown_iters
    # 3) 
    else:
        decay_ratio = (it - args.warmup_iters) / (args.num_iterations - args.warmup_iters)
        assert 0 <= decay_ratio <= 1
        return 0.1**decay_ratio

schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]

# begin logging
if master_process:

    now = datetime.datetime.now()
    date_part = now.strftime('%d.%m')  
    seconds_since_midnight = (now - now.replace(hour=0, minute=0, second=0, microsecond=0)).seconds #int(time.time() % 86400)
    run_id = f"{date_part}_{seconds_since_midnight}"

    if args.lm_head == "euc":
        suffix = "euc"
    elif args.lm_head == "hyp":
        suffix = f"hyp_{args.curvature}"
    else:
        raise ValueError(f"Invalid lm_head name format.")
    # Construct the new folder name
    run_id = f"{run_id}_{suffix}"
    
    # Create log directory and file
    logdir = f'runs/{run_id}/'
    os.makedirs(logdir, exist_ok=True)
    os.makedirs(os.path.join(logdir, "tensorboard_logs"), exist_ok=True)

    print(f"Logs for this run will be stored in: {logdir}")

    print("Writing logs to: " + os.path.join(logdir, "tensorboard_logs"))
    writer = SummaryWriter(log_dir=os.path.join(logdir, "tensorboard_logs"))

    config_path = os.path.join(logdir, "config.json")
    with open(config_path, "w") as f:
        json.dump(vars(args), f, indent=4)

    def pretty_json(hp):
        json_hp = json.dumps(hp, indent=2)
        return "".join("\t" + line for line in json_hp.splitlines(True))
    
    writer.add_text("run_params", pretty_json(vars(args)))
    logfile = os.path.join(logdir, 'log.txt')
    # create the log file
    with open(logfile, "w") as f:
        # begin the log by printing this file (the Python code)
        f.write('='*100 + '\n')
        f.write(code)
        f.write('='*100 + '\n')
        # log information about the hardware/software environment this is running on
        # and print the full `nvidia-smi` to file
        f.write(f"Running pytorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}\nnvidia-smi:\n")
        import subprocess
        result = subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        f.write(f'{result.stdout}\n')
        f.write('='*100 + '\n')

training_time_s = 0.0
# start the clock
torch.cuda.synchronize()
t0 = time.time()
total_t0 = time.time()
train_loss_accum = 0.0
train_loss_count = 0
# begin training
train_loader.reset()
for step in range(args.num_iterations + 1):
    last_step = (step == args.num_iterations)
    # This effectively ignores timing first 10 steps, which are slower for weird reasons.
    # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
    # steps with dummy data first, and then re-initialize the model and reset the loader.
    if step == 10:
        training_time_s = 0.0
        t0 = time.time()
    timed_steps = float('nan') if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

    # once in a while evaluate the validation dataset
    if (last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0)):
        # stop the clock
        torch.cuda.synchronize()
        training_time_s += time.time() - t0
        # run validation batches
        model.eval()
        val_loader.reset()
        val_loss = 0.0
        for _ in range(val_steps):
            x_val, y_val = val_loader.next_batch()
            with ctx: # of course, we'd like to use no_grad() here too, but that creates a torch.compile error for some reason
                _, loss = model(x_val, y_val, return_logits=False)
                val_loss += loss.detach()
                del loss
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        val_loss /= val_steps
        # log val loss to console and to logfile
        if master_process:
            print(f'step:{step}/{args.num_iterations} val_loss:{val_loss:.4f} train_time:{training_time_s:.2f}s step_avg:{1000*training_time_s/(timed_steps-1):.0f}ms')
            with open(logfile, "a") as f:
                f.write(f'step:{step}/{args.num_iterations} val_loss:{val_loss:.4f} train_time:{training_time_s:.2f}s step_avg:{1000*training_time_s/(timed_steps-1):.0f}ms\n')
            writer.add_scalar('Loss/Validation', val_loss.item(), step)
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.time()

    if master_process and step and (step % args.generate_every == 0):
        # Use a fixed prompt or context for generation
        prompt = "Once upon a time"  # Customize as per your dataset
        context = encode_text(prompt)
        
        # Generate text
        generated_tokens = generate_text(raw_model, context, max_length=200, temperature=1.0, top_k=50)
        generated_text = decode_tokens(generated_tokens[0])
        
        # Log the generated text to TensorBoard
        writer.add_text(f"Generated_Text/Step_{step}", generated_text, step)
        
        # Optionally log to console for immediate feedback
        print(f"[Step {step}] Generated Text: {generated_text}")


    if master_process and (last_step or (args.save_every > 0 and step % args.save_every == 0)):
        # stop the clock
        torch.cuda.synchronize()
        training_time_s += time.time() - t0
        # save the state of the training process
        log = dict(step=step, code=code, model=raw_model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
        torch.save(log, 'ckpts/%s_state_step%06d.pt' % (run_id, step))
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.time()

    # bit confusing: we want to make sure to eval on 0th iteration
    # but also after the very last iteration. so we loop for step <= num_iterations
    # instead of just < num_iterations (one extra due to <=), only to do
    # the validation/sampling one last time, and then we break right here as we're done.
    if last_step:
        break

    # --------------- TRAINING SECTION BEGIN -----------------
    model.train()
    for i in range(1, train_accumulation_steps+1):
        # forward pass
        with ctx:
            _, loss = model(x, y, return_logits=False)
            train_loss = loss.detach()
        # advance the dataset for the next batch
        x, y = train_loader.next_batch()
        # backward pass
        if i < train_accumulation_steps:
            with model.no_sync(): # there's no need to sync gradients every accumulation step
                loss.backward()
        else:
            loss.backward() # just sync on the last step
    for name, p in model.named_parameters():
        if p.grad is None:
            # print(f"WARNING: Parameter {name} has no gradient. Skipping.")
            continue
        p.grad /= train_accumulation_steps
    # step the optimizers and schedulers
    for opt, sched in zip(optimizers, schedulers):
        opt.step()
        sched.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    train_loss_accum += train_loss.item()
    train_loss_count += 1
    # --------------- TRAINING SECTION END -------------------
    # everything that follows now is just diagnostics, prints, logging, etc.

    #dist.all_reduce(train_loss, op=dist.ReduceOp.AVG) # all-reducing the training loss would be more correct in terms of logging, but slower
    if master_process and (step+1) % args.train_loss_every == 0:
        avg_train_loss = train_loss_accum / train_loss_count
        elapsed_time = time.time() - total_t0
        approx_time = training_time_s + (time.time() - t0)
        avg_time_per_step = approx_time/timed_steps
        estimated_total_time = avg_time_per_step * args.num_iterations
        print(f"step:{step+1}/{args.num_iterations} avg_train_loss:{avg_train_loss:.4f} time:{elapsed_time:.0f}/{estimated_total_time:.0f}s step_avg:{1000*avg_time_per_step:.0f}ms")
        with open(logfile, "a") as f:
            f.write(f"step:{step+1}/{args.num_iterations} avg_train_loss:{avg_train_loss:.4f} time:{elapsed_time:.0f}s step_avg:{1000*avg_time_per_step:.0f}ms\n")
        writer.add_scalar('Loss/Train', avg_train_loss, step)
        train_loss_accum = 0.0
        train_loss_count = 0

if master_process:
    total_training_time = time.time() - total_t0
    print(f"Total training time: {total_training_time:.2f}s")
    with open(logfile, "a") as f:
        f.write(f"Total training time: {total_training_time:.2f}s\n")
    print(f"peak memory consumption: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB")

# -------------------------------------------------------------------------
# clean up nice
if master_process:
    writer.close()
dist.destroy_process_group()
====================================================================================================
Running pytorch 2.4.1+cu121 compiled for CUDA 12.1
nvidia-smi:
Sat Jan 11 09:17:12 2025       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.154.05             Driver Version: 535.154.05   CUDA Version: 12.3     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:19:00.0 Off |                    0 |
| N/A   27C    P0              72W / 700W |      0MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:2D:00.0 Off |                    0 |
| N/A   32C    P0             117W / 700W |   3379MiB / 81559MiB |      2%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:3F:00.0 Off |                    0 |
| N/A   31C    P0             120W / 700W |   3379MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:66:00.0 Off |                    0 |
| N/A   26C    P0              72W / 700W |      0MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:9B:00.0 Off |                    0 |
| N/A   26C    P0              73W / 700W |      0MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:AE:00.0 Off |                    0 |
| N/A   28C    P0              72W / 700W |      0MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:BF:00.0 Off |                    0 |
| N/A   27C    P0              73W / 700W |      0MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:E4:00.0 Off |                    0 |
| N/A   27C    P0              73W / 700W |      0MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
|    1   N/A  N/A    409821      C   ...niconda3/envs/fokin_HCNN/bin/python     3370MiB |
|    2   N/A  N/A    409822      C   ...niconda3/envs/fokin_HCNN/bin/python     3370MiB |
+---------------------------------------------------------------------------------------+

====================================================================================================
step:0/10000 val_loss:10.9873 train_time:0.22s step_avg:nanms
step:100/10000 avg_train_loss:7.2013 time:82s step_avg:128ms
step:100/10000 val_loss:6.5715 train_time:11.51s step_avg:128ms
step:200/10000 avg_train_loss:6.3665 time:100s step_avg:128ms
step:200/10000 val_loss:6.1934 train_time:24.30s step_avg:128ms
step:300/10000 avg_train_loss:6.0720 time:118s step_avg:128ms
step:300/10000 val_loss:5.9825 train_time:37.10s step_avg:128ms
step:400/10000 avg_train_loss:5.8781 time:136s step_avg:128ms
step:400/10000 val_loss:5.8198 train_time:49.90s step_avg:128ms
step:500/10000 avg_train_loss:5.7400 time:154s step_avg:128ms
step:500/10000 val_loss:5.6989 train_time:62.70s step_avg:128ms
step:600/10000 avg_train_loss:5.6620 time:172s step_avg:128ms
step:600/10000 val_loss:5.6124 train_time:75.50s step_avg:128ms
step:700/10000 avg_train_loss:5.5703 time:190s step_avg:128ms
step:700/10000 val_loss:5.5410 train_time:88.27s step_avg:128ms
step:800/10000 avg_train_loss:5.5011 time:208s step_avg:128ms
step:800/10000 val_loss:5.4813 train_time:101.06s step_avg:128ms
step:900/10000 avg_train_loss:5.4628 time:226s step_avg:128ms
step:900/10000 val_loss:5.4318 train_time:113.86s step_avg:128ms
step:1000/10000 avg_train_loss:5.4174 time:244s step_avg:128ms
step:1000/10000 val_loss:5.3894 train_time:126.63s step_avg:128ms
step:1100/10000 avg_train_loss:5.3740 time:262s step_avg:128ms
step:1100/10000 val_loss:5.3558 train_time:139.43s step_avg:128ms
step:1200/10000 avg_train_loss:5.3547 time:280s step_avg:128ms
step:1200/10000 val_loss:5.3257 train_time:152.22s step_avg:128ms
step:1300/10000 avg_train_loss:5.3190 time:298s step_avg:128ms
step:1300/10000 val_loss:5.2949 train_time:165.02s step_avg:128ms
step:1400/10000 avg_train_loss:5.2710 time:316s step_avg:128ms
step:1400/10000 val_loss:5.2717 train_time:177.82s step_avg:128ms
step:1500/10000 avg_train_loss:5.2427 time:334s step_avg:128ms
step:1500/10000 val_loss:5.2522 train_time:190.61s step_avg:128ms
step:1600/10000 avg_train_loss:5.2246 time:353s step_avg:128ms
step:1600/10000 val_loss:5.2291 train_time:203.60s step_avg:128ms
step:1700/10000 avg_train_loss:5.2417 time:371s step_avg:128ms
step:1700/10000 val_loss:5.2145 train_time:216.40s step_avg:128ms
step:1800/10000 avg_train_loss:5.1965 time:389s step_avg:128ms
step:1800/10000 val_loss:5.1971 train_time:229.20s step_avg:128ms
step:1900/10000 avg_train_loss:5.1997 time:407s step_avg:128ms
step:1900/10000 val_loss:5.1827 train_time:241.99s step_avg:128ms
step:2000/10000 avg_train_loss:5.1944 time:425s step_avg:128ms
step:2000/10000 val_loss:5.1673 train_time:254.79s step_avg:128ms
step:2100/10000 avg_train_loss:5.1476 time:443s step_avg:128ms
step:2100/10000 val_loss:5.1576 train_time:267.58s step_avg:128ms
step:2200/10000 avg_train_loss:5.1533 time:461s step_avg:128ms
step:2200/10000 val_loss:5.1432 train_time:280.38s step_avg:128ms
step:2300/10000 avg_train_loss:5.1543 time:479s step_avg:128ms
step:2300/10000 val_loss:5.1334 train_time:293.18s step_avg:128ms
step:2400/10000 avg_train_loss:5.1442 time:497s step_avg:128ms
step:2400/10000 val_loss:5.1218 train_time:305.97s step_avg:128ms
step:2500/10000 avg_train_loss:5.1493 time:515s step_avg:128ms
step:2500/10000 val_loss:5.1129 train_time:318.76s step_avg:128ms
step:2600/10000 avg_train_loss:5.1280 time:533s step_avg:128ms
step:2600/10000 val_loss:5.1027 train_time:331.56s step_avg:128ms
step:2700/10000 avg_train_loss:5.1415 time:551s step_avg:128ms
step:2700/10000 val_loss:5.0971 train_time:344.35s step_avg:128ms
step:2800/10000 avg_train_loss:5.0705 time:569s step_avg:128ms
step:2800/10000 val_loss:5.0875 train_time:357.15s step_avg:128ms
step:2900/10000 avg_train_loss:5.0799 time:588s step_avg:128ms
step:2900/10000 val_loss:5.0813 train_time:369.94s step_avg:128ms
step:3000/10000 avg_train_loss:5.0834 time:606s step_avg:128ms
step:3000/10000 val_loss:5.0710 train_time:382.74s step_avg:128ms
step:3100/10000 avg_train_loss:5.0781 time:624s step_avg:128ms
step:3100/10000 val_loss:5.0652 train_time:395.72s step_avg:128ms
step:3200/10000 avg_train_loss:5.0383 time:642s step_avg:128ms
step:3200/10000 val_loss:5.0579 train_time:408.51s step_avg:128ms
step:3300/10000 avg_train_loss:5.0770 time:660s step_avg:128ms
step:3300/10000 val_loss:5.0512 train_time:421.31s step_avg:128ms
step:3400/10000 avg_train_loss:5.0325 time:678s step_avg:128ms
step:3400/10000 val_loss:5.0444 train_time:434.10s step_avg:128ms
step:3500/10000 avg_train_loss:5.0463 time:696s step_avg:128ms
step:3500/10000 val_loss:5.0383 train_time:446.89s step_avg:128ms
step:3600/10000 avg_train_loss:5.0469 time:714s step_avg:128ms
step:3600/10000 val_loss:5.0334 train_time:459.68s step_avg:128ms
step:3700/10000 avg_train_loss:5.0469 time:732s step_avg:128ms
step:3700/10000 val_loss:5.0288 train_time:472.48s step_avg:128ms
step:3800/10000 avg_train_loss:5.0221 time:750s step_avg:128ms
step:3800/10000 val_loss:5.0231 train_time:485.27s step_avg:128ms
step:3900/10000 avg_train_loss:5.0143 time:768s step_avg:128ms
step:3900/10000 val_loss:5.0183 train_time:498.06s step_avg:128ms
step:4000/10000 avg_train_loss:5.0151 time:786s step_avg:128ms
step:4000/10000 val_loss:5.0132 train_time:510.86s step_avg:128ms
step:4100/10000 avg_train_loss:5.0146 time:804s step_avg:128ms
step:4100/10000 val_loss:5.0087 train_time:523.65s step_avg:128ms
step:4200/10000 avg_train_loss:5.0063 time:822s step_avg:128ms
step:4200/10000 val_loss:5.0043 train_time:536.44s step_avg:128ms
step:4300/10000 avg_train_loss:5.0002 time:841s step_avg:128ms
step:4300/10000 val_loss:5.0006 train_time:549.23s step_avg:128ms
step:4400/10000 avg_train_loss:5.0137 time:859s step_avg:128ms
step:4400/10000 val_loss:4.9964 train_time:562.02s step_avg:128ms
step:4500/10000 avg_train_loss:5.0165 time:877s step_avg:128ms
step:4500/10000 val_loss:4.9906 train_time:574.78s step_avg:128ms
step:4600/10000 avg_train_loss:4.9952 time:895s step_avg:128ms
step:4600/10000 val_loss:4.9885 train_time:587.76s step_avg:128ms
step:4700/10000 avg_train_loss:4.9874 time:913s step_avg:128ms
step:4700/10000 val_loss:4.9831 train_time:600.52s step_avg:128ms
step:4800/10000 avg_train_loss:4.9917 time:931s step_avg:128ms
step:4800/10000 val_loss:4.9798 train_time:613.30s step_avg:128ms
step:4900/10000 avg_train_loss:4.9750 time:949s step_avg:128ms
step:4900/10000 val_loss:4.9764 train_time:626.09s step_avg:128ms
step:5000/10000 avg_train_loss:4.9947 time:967s step_avg:128ms
step:5000/10000 val_loss:4.9730 train_time:638.89s step_avg:128ms
step:5100/10000 avg_train_loss:4.9736 time:1157s step_avg:162ms
step:5100/10000 val_loss:4.9692 train_time:824.03s step_avg:162ms
step:5200/10000 avg_train_loss:4.9787 time:1195s step_avg:163ms
step:5200/10000 val_loss:4.9665 train_time:844.29s step_avg:163ms
step:5300/10000 avg_train_loss:4.9660 time:1225s step_avg:163ms
step:5300/10000 val_loss:4.9630 train_time:864.56s step_avg:163ms
step:5400/10000 avg_train_loss:4.9544 time:1255s step_avg:164ms
step:5400/10000 val_loss:4.9598 train_time:884.82s step_avg:164ms
step:5500/10000 avg_train_loss:4.9847 time:1285s step_avg:165ms
step:5500/10000 val_loss:4.9570 train_time:905.08s step_avg:165ms
step:5600/10000 avg_train_loss:4.9455 time:1315s step_avg:166ms
step:5600/10000 val_loss:4.9529 train_time:925.35s step_avg:166ms
step:5700/10000 avg_train_loss:4.9363 time:1345s step_avg:166ms
step:5700/10000 val_loss:4.9520 train_time:945.61s step_avg:166ms
step:5800/10000 avg_train_loss:4.9442 time:1375s step_avg:167ms
step:5800/10000 val_loss:4.9480 train_time:965.87s step_avg:167ms
step:5900/10000 avg_train_loss:4.9518 time:1405s step_avg:167ms
step:5900/10000 val_loss:4.9455 train_time:986.14s step_avg:167ms
step:6000/10000 avg_train_loss:4.9476 time:1435s step_avg:168ms
step:6000/10000 val_loss:4.9426 train_time:1006.40s step_avg:168ms
step:6100/10000 avg_train_loss:4.9519 time:1465s step_avg:169ms
step:6100/10000 val_loss:4.9405 train_time:1026.83s step_avg:169ms
step:6200/10000 avg_train_loss:4.9683 time:1495s step_avg:169ms
step:6200/10000 val_loss:4.9377 train_time:1047.09s step_avg:169ms
step:6300/10000 avg_train_loss:4.9572 time:1525s step_avg:170ms
step:6300/10000 val_loss:4.9348 train_time:1067.36s step_avg:170ms
step:6400/10000 avg_train_loss:4.9568 time:1554s step_avg:170ms
step:6400/10000 val_loss:4.9337 train_time:1087.62s step_avg:170ms
step:6500/10000 avg_train_loss:4.9683 time:1584s step_avg:171ms
step:6500/10000 val_loss:4.9306 train_time:1107.89s step_avg:171ms
step:6600/10000 avg_train_loss:4.9365 time:1614s step_avg:171ms
step:6600/10000 val_loss:4.9277 train_time:1128.15s step_avg:171ms
step:6700/10000 avg_train_loss:4.9234 time:1644s step_avg:172ms
step:6700/10000 val_loss:4.9263 train_time:1148.42s step_avg:172ms
step:6800/10000 avg_train_loss:4.9397 time:1674s step_avg:172ms
step:6800/10000 val_loss:4.9230 train_time:1168.68s step_avg:172ms
step:6900/10000 avg_train_loss:4.9293 time:1704s step_avg:173ms
step:6900/10000 val_loss:4.9219 train_time:1188.95s step_avg:173ms
step:7000/10000 avg_train_loss:4.9390 time:1734s step_avg:173ms
step:7000/10000 val_loss:4.9191 train_time:1209.21s step_avg:173ms
step:7100/10000 avg_train_loss:4.9276 time:1764s step_avg:173ms
step:7100/10000 val_loss:4.9167 train_time:1229.48s step_avg:173ms
step:7200/10000 avg_train_loss:4.8996 time:1794s step_avg:174ms
step:7200/10000 val_loss:4.9148 train_time:1249.74s step_avg:174ms
step:7300/10000 avg_train_loss:4.9365 time:1824s step_avg:174ms
step:7300/10000 val_loss:4.9131 train_time:1270.01s step_avg:174ms
step:7400/10000 avg_train_loss:4.9217 time:1854s step_avg:175ms
step:7400/10000 val_loss:4.9113 train_time:1290.28s step_avg:175ms
step:7500/10000 avg_train_loss:4.9377 time:1883s step_avg:175ms
step:7500/10000 val_loss:4.9091 train_time:1310.54s step_avg:175ms
step:7600/10000 avg_train_loss:4.9160 time:1913s step_avg:175ms
step:7600/10000 val_loss:4.9077 train_time:1330.81s step_avg:175ms
step:7700/10000 avg_train_loss:4.9418 time:1943s step_avg:176ms
step:7700/10000 val_loss:4.9062 train_time:1351.23s step_avg:176ms
step:7800/10000 avg_train_loss:4.9050 time:1973s step_avg:176ms
step:7800/10000 val_loss:4.9038 train_time:1371.50s step_avg:176ms
step:7900/10000 avg_train_loss:4.9280 time:2003s step_avg:176ms
step:7900/10000 val_loss:4.9016 train_time:1391.77s step_avg:176ms
step:8000/10000 avg_train_loss:4.8972 time:2033s step_avg:177ms
step:8000/10000 val_loss:4.9005 train_time:1412.03s step_avg:177ms
step:8100/10000 avg_train_loss:4.9282 time:2063s step_avg:177ms
step:8100/10000 val_loss:4.8990 train_time:1432.29s step_avg:177ms
step:8200/10000 avg_train_loss:4.8864 time:2093s step_avg:177ms
step:8200/10000 val_loss:4.8974 train_time:1452.55s step_avg:177ms
step:8300/10000 avg_train_loss:4.8981 time:2123s step_avg:178ms
step:8300/10000 val_loss:4.8954 train_time:1472.82s step_avg:178ms
step:8400/10000 avg_train_loss:4.9177 time:2153s step_avg:178ms
step:8400/10000 val_loss:4.8943 train_time:1493.08s step_avg:178ms
step:8500/10000 avg_train_loss:4.8857 time:2183s step_avg:178ms
step:8500/10000 val_loss:4.8929 train_time:1513.34s step_avg:178ms
step:8600/10000 avg_train_loss:4.8889 time:2213s step_avg:179ms
step:8600/10000 val_loss:4.8915 train_time:1533.61s step_avg:179ms
step:8700/10000 avg_train_loss:4.9129 time:2242s step_avg:179ms
step:8700/10000 val_loss:4.8904 train_time:1553.87s step_avg:179ms
step:8800/10000 avg_train_loss:4.8830 time:2272s step_avg:179ms
step:8800/10000 val_loss:4.8887 train_time:1574.14s step_avg:179ms
step:8900/10000 avg_train_loss:4.9241 time:2302s step_avg:179ms
step:8900/10000 val_loss:4.8872 train_time:1594.40s step_avg:179ms
step:9000/10000 avg_train_loss:4.8820 time:2332s step_avg:180ms
step:9000/10000 val_loss:4.8864 train_time:1614.67s step_avg:180ms
step:9100/10000 avg_train_loss:4.8940 time:2362s step_avg:180ms
step:9100/10000 val_loss:4.8843 train_time:1634.93s step_avg:180ms
step:9200/10000 avg_train_loss:4.9152 time:2392s step_avg:180ms
step:9200/10000 val_loss:4.8831 train_time:1655.36s step_avg:180ms
step:9300/10000 avg_train_loss:4.9093 time:2422s step_avg:180ms
step:9300/10000 val_loss:4.8821 train_time:1675.62s step_avg:180ms
step:9400/10000 avg_train_loss:4.8724 time:2452s step_avg:181ms
step:9400/10000 val_loss:4.8805 train_time:1695.89s step_avg:181ms
step:9500/10000 avg_train_loss:4.8924 time:2482s step_avg:181ms
step:9500/10000 val_loss:4.8798 train_time:1716.15s step_avg:181ms
step:9600/10000 avg_train_loss:4.8794 time:2512s step_avg:181ms
step:9600/10000 val_loss:4.8784 train_time:1736.42s step_avg:181ms
step:9700/10000 avg_train_loss:4.8768 time:2542s step_avg:181ms
step:9700/10000 val_loss:4.8775 train_time:1756.68s step_avg:181ms
step:9800/10000 avg_train_loss:4.9159 time:2572s step_avg:182ms
step:9800/10000 val_loss:4.8760 train_time:1776.95s step_avg:182ms
step:9900/10000 avg_train_loss:4.8826 time:2602s step_avg:182ms
step:9900/10000 val_loss:4.8750 train_time:1797.21s step_avg:182ms
step:10000/10000 avg_train_loss:4.8711 time:2631s step_avg:182ms
step:10000/10000 val_loss:4.8739 train_time:1817.51s step_avg:182ms
Total training time: 2644.71s
